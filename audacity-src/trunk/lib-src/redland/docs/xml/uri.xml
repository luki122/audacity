<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="redland-uri">
<refmeta>
<refentrytitle role="top_of_page" id="redland-uri.top_of_page">URI</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>REDLAND Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>URI</refname>
<refpurpose>URI class</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="redland-uri.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
typedef             <link linkend="librdf-uri">librdf_uri</link>;
<link linkend="librdf-uri">librdf_uri</link>*         <link linkend="librdf-new-uri">librdf_new_uri</link>                      (<link linkend="librdf-world">librdf_world</link> *world,
                                                         unsigned <link linkend="char">char</link> *uri_string);
<link linkend="librdf-uri">librdf_uri</link>*         <link linkend="librdf-new-uri-from-uri">librdf_new_uri_from_uri</link>             (<link linkend="librdf-uri">librdf_uri</link> *old_uri);
<link linkend="librdf-uri">librdf_uri</link>*         <link linkend="librdf-new-uri-from-uri-local-name">librdf_new_uri_from_uri_local_name</link>  (<link linkend="librdf-uri">librdf_uri</link> *old_uri,
                                                         unsigned <link linkend="char">char</link> *local_name);
<link linkend="void">void</link>                <link linkend="librdf-free-uri">librdf_free_uri</link>                     (<link linkend="librdf-uri">librdf_uri</link> *uri);
unsigned <link linkend="char">char</link>*      <link linkend="librdf-uri-as-string">librdf_uri_as_string</link>                (<link linkend="librdf-uri">librdf_uri</link> *uri);
unsigned <link linkend="char">char</link>*      <link linkend="librdf-uri-as-counted-string">librdf_uri_as_counted_string</link>        (<link linkend="librdf-uri">librdf_uri</link> *uri,
                                                         <link linkend="size-t">size_t</link> *len_p);
<link linkend="void">void</link>                <link linkend="librdf-uri-print">librdf_uri_print</link>                    (<link linkend="librdf-uri">librdf_uri</link> *uri,
                                                         <link linkend="FILE:CAPS">FILE</link> *fh);
unsigned <link linkend="char">char</link>*      <link linkend="librdf-uri-to-string">librdf_uri_to_string</link>                (<link linkend="librdf-uri">librdf_uri</link> *uri);
unsigned <link linkend="char">char</link>*      <link linkend="librdf-uri-to-counted-string">librdf_uri_to_counted_string</link>        (<link linkend="librdf-uri">librdf_uri</link> *uri,
                                                         <link linkend="size-t">size_t</link> *len_p);
<link linkend="int">int</link>                 <link linkend="librdf-uri-equals">librdf_uri_equals</link>                   (<link linkend="librdf-uri">librdf_uri</link> *first_uri,
                                                         <link linkend="librdf-uri">librdf_uri</link> *second_uri);
<link linkend="int">int</link>                 <link linkend="librdf-uri-is-file-uri">librdf_uri_is_file_uri</link>              (<link linkend="librdf-uri">librdf_uri</link> *uri);
const <link linkend="char">char</link>*         <link linkend="librdf-uri-to-filename">librdf_uri_to_filename</link>              (<link linkend="librdf-uri">librdf_uri</link> *uri);
<link linkend="librdf-uri">librdf_uri</link>*         <link linkend="librdf-new-uri-normalised-to-base">librdf_new_uri_normalised_to_base</link>   (unsigned <link linkend="char">char</link> *uri_string,
                                                         <link linkend="librdf-uri">librdf_uri</link> *source_uri,
                                                         <link linkend="librdf-uri">librdf_uri</link> *base_uri);
<link linkend="librdf-uri">librdf_uri</link>*         <link linkend="librdf-new-uri-relative-to-base">librdf_new_uri_relative_to_base</link>     (<link linkend="librdf-uri">librdf_uri</link> *base_uri,
                                                         unsigned <link linkend="char">char</link> *uri_string);
<link linkend="librdf-uri">librdf_uri</link>*         <link linkend="librdf-new-uri-from-filename">librdf_new_uri_from_filename</link>        (<link linkend="librdf-world">librdf_world</link> *world,
                                                         const <link linkend="char">char</link> *filename);
<link linkend="int">int</link>                 <link linkend="librdf-uri-compare">librdf_uri_compare</link>                  (<link linkend="librdf-uri">librdf_uri</link> *uri1,
                                                         <link linkend="librdf-uri">librdf_uri</link> *uri2);
<link linkend="int">int</link>                 (<link linkend="librdf-uri-filter-func">*librdf_uri_filter_func</link>)           (<link linkend="void">void</link> *user_data,
                                                         <link linkend="librdf-uri">librdf_uri</link> *uri);
</synopsis>
</refsynopsisdiv>









<refsect1 id="redland-uri.description" role="desc">
<title role="desc.title">Description</title>
<para>
A class for absolute URIs and relative URI computation utility
functions.  Only absolute URIs are provided, with no current access
to internals of URIs such as URI scheme, path, authority.  Relative
URIs can be generated against some base or turned to and from local
filenames.
</para>
</refsect1>

<refsect1 id="redland-uri.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="librdf-uri" role="typedef">
<title>librdf_uri</title>
<indexterm zone="librdf-uri"><primary>librdf_uri</primary></indexterm><programlisting>typedef struct librdf_uri_s librdf_uri;
</programlisting>
<para>
Redland URI class.</para>
<para>

</para></refsect2>
<refsect2 id="librdf-new-uri" role="function">
<title>librdf_new_uri ()</title>
<indexterm zone="librdf-new-uri"><primary>librdf_new_uri</primary></indexterm><programlisting><link linkend="librdf-uri">librdf_uri</link>*         librdf_new_uri                      (<link linkend="librdf-world">librdf_world</link> *world,
                                                         unsigned <link linkend="char">char</link> *uri_string);</programlisting>
<para>
Constructor - create a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object from a URI string.
</para>
<para>
A new URI is constructed from a copy of the string.  If the
string is a NULL pointer or empty (0 length) then the result is NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>world</parameter>&nbsp;:</term>
<listitem><simpara> redland world object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri_string</parameter>&nbsp;:</term>
<listitem><simpara> URI in string form
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-new-uri-from-uri" role="function">
<title>librdf_new_uri_from_uri ()</title>
<indexterm zone="librdf-new-uri-from-uri"><primary>librdf_new_uri_from_uri</primary></indexterm><programlisting><link linkend="librdf-uri">librdf_uri</link>*         librdf_new_uri_from_uri             (<link linkend="librdf-uri">librdf_uri</link> *old_uri);</programlisting>
<para>
Copy constructor - create a new librdf_uri object from an existing librdf_uri object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>old_uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-new-uri-from-uri-local-name" role="function">
<title>librdf_new_uri_from_uri_local_name ()</title>
<indexterm zone="librdf-new-uri-from-uri-local-name"><primary>librdf_new_uri_from_uri_local_name</primary></indexterm><programlisting><link linkend="librdf-uri">librdf_uri</link>*         librdf_new_uri_from_uri_local_name  (<link linkend="librdf-uri">librdf_uri</link> *old_uri,
                                                         unsigned <link linkend="char">char</link> *local_name);</programlisting>
<para>
Copy constructor - create a new librdf_uri object from an existing librdf_uri object and a local name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>old_uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>local_name</parameter>&nbsp;:</term>
<listitem><simpara> local name to append to URI
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-free-uri" role="function">
<title>librdf_free_uri ()</title>
<indexterm zone="librdf-free-uri"><primary>librdf_free_uri</primary></indexterm><programlisting><link linkend="void">void</link>                librdf_free_uri                     (<link linkend="librdf-uri">librdf_uri</link> *uri);</programlisting>
<para>
Destructor - destroy a <link linkend="librdf-uri"><type>librdf_uri</type></link> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-as-string" role="function">
<title>librdf_uri_as_string ()</title>
<indexterm zone="librdf-uri-as-string"><primary>librdf_uri_as_string</primary></indexterm><programlisting>unsigned <link linkend="char">char</link>*      librdf_uri_as_string                (<link linkend="librdf-uri">librdf_uri</link> *uri);</programlisting>
<para>
Get a pointer to the string representation of the URI.
</para>
<para>
Returns a shared pointer to the URI string representation. 
Note: does not allocate a new string so the caller must not free it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> string representation of URI
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-as-counted-string" role="function">
<title>librdf_uri_as_counted_string ()</title>
<indexterm zone="librdf-uri-as-counted-string"><primary>librdf_uri_as_counted_string</primary></indexterm><programlisting>unsigned <link linkend="char">char</link>*      librdf_uri_as_counted_string        (<link linkend="librdf-uri">librdf_uri</link> *uri,
                                                         <link linkend="size-t">size_t</link> *len_p);</programlisting>
<para>
Get a pointer to the string representation of the URI with length.
</para>
<para>
Returns a shared pointer to the URI string representation. 
Note: does not allocate a new string so the caller must not free it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len_p</parameter>&nbsp;:</term>
<listitem><simpara> pointer to location to store length
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> string representation of URI
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-print" role="function">
<title>librdf_uri_print ()</title>
<indexterm zone="librdf-uri-print"><primary>librdf_uri_print</primary></indexterm><programlisting><link linkend="void">void</link>                librdf_uri_print                    (<link linkend="librdf-uri">librdf_uri</link> *uri,
                                                         <link linkend="FILE:CAPS">FILE</link> *fh);</programlisting>
<para>
Print the URI to the given file handle.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fh</parameter>&nbsp;:</term>
<listitem><simpara> file handle
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-to-string" role="function">
<title>librdf_uri_to_string ()</title>
<indexterm zone="librdf-uri-to-string"><primary>librdf_uri_to_string</primary></indexterm><programlisting>unsigned <link linkend="char">char</link>*      librdf_uri_to_string                (<link linkend="librdf-uri">librdf_uri</link> *uri);</programlisting>
<para>
Format the URI as a string.
</para>
<para>
Note: this method allocates a new string since this is a _to_ method
and the caller must free the resulting memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> string representation of the URI or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-to-counted-string" role="function">
<title>librdf_uri_to_counted_string ()</title>
<indexterm zone="librdf-uri-to-counted-string"><primary>librdf_uri_to_counted_string</primary></indexterm><programlisting>unsigned <link linkend="char">char</link>*      librdf_uri_to_counted_string        (<link linkend="librdf-uri">librdf_uri</link> *uri,
                                                         <link linkend="size-t">size_t</link> *len_p);</programlisting>
<para>
Format the URI as a counted string.
</para>
<para>
Note: this method allocates a new string since this is a _to_ method
and the caller must free the resulting memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len_p</parameter>&nbsp;:</term>
<listitem><simpara> pointer to location to store length
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> string representation of the URI or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-equals" role="function">
<title>librdf_uri_equals ()</title>
<indexterm zone="librdf-uri-equals"><primary>librdf_uri_equals</primary></indexterm><programlisting><link linkend="int">int</link>                 librdf_uri_equals                   (<link linkend="librdf-uri">librdf_uri</link> *first_uri,
                                                         <link linkend="librdf-uri">librdf_uri</link> *second_uri);</programlisting>
<para>
Compare two librdf_uri objects for equality.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>first_uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object 1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>second_uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object 2
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> non 0 if the objects are equal
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-is-file-uri" role="function">
<title>librdf_uri_is_file_uri ()</title>
<indexterm zone="librdf-uri-is-file-uri"><primary>librdf_uri_is_file_uri</primary></indexterm><programlisting><link linkend="int">int</link>                 librdf_uri_is_file_uri              (<link linkend="librdf-uri">librdf_uri</link> *uri);</programlisting>
<para>
Test if a URI points to a filename.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> Non zero if the URI points to a file
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-to-filename" role="function">
<title>librdf_uri_to_filename ()</title>
<indexterm zone="librdf-uri-to-filename"><primary>librdf_uri_to_filename</primary></indexterm><programlisting>const <link linkend="char">char</link>*         librdf_uri_to_filename              (<link linkend="librdf-uri">librdf_uri</link> *uri);</programlisting>
<para>
Return pointer to filename of URI.
</para>
<para>
Returns a pointer to a newly allocated buffer that
the caller must free.  This will fail if the URI
is not a file: URI.  This can be checked with <link linkend="librdf-uri-is-file-uri"><type>librdf_uri_is_file_uri</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to filename or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-new-uri-normalised-to-base" role="function">
<title>librdf_new_uri_normalised_to_base ()</title>
<indexterm zone="librdf-new-uri-normalised-to-base"><primary>librdf_new_uri_normalised_to_base</primary></indexterm><programlisting><link linkend="librdf-uri">librdf_uri</link>*         librdf_new_uri_normalised_to_base   (unsigned <link linkend="char">char</link> *uri_string,
                                                         <link linkend="librdf-uri">librdf_uri</link> *source_uri,
                                                         <link linkend="librdf-uri">librdf_uri</link> *base_uri);</programlisting>
<para>
Constructor - create a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object from a URI string stripped of the source URI, made relative to the base URI.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri_string</parameter>&nbsp;:</term>
<listitem><simpara> URI in string form
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source_uri</parameter>&nbsp;:</term>
<listitem><simpara> source URI to remove
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>base_uri</parameter>&nbsp;:</term>
<listitem><simpara> base URI to add
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-new-uri-relative-to-base" role="function">
<title>librdf_new_uri_relative_to_base ()</title>
<indexterm zone="librdf-new-uri-relative-to-base"><primary>librdf_new_uri_relative_to_base</primary></indexterm><programlisting><link linkend="librdf-uri">librdf_uri</link>*         librdf_new_uri_relative_to_base     (<link linkend="librdf-uri">librdf_uri</link> *base_uri,
                                                         unsigned <link linkend="char">char</link> *uri_string);</programlisting>
<para>
Constructor - create a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object from a URI string relative to a base URI.
</para>
<para>
An empty uri_string or NULL is equivalent to 
librdf_new_uri_from_uri(base_uri)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>base_uri</parameter>&nbsp;:</term>
<listitem><simpara> absolute base URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri_string</parameter>&nbsp;:</term>
<listitem><simpara> relative URI string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-new-uri-from-filename" role="function">
<title>librdf_new_uri_from_filename ()</title>
<indexterm zone="librdf-new-uri-from-filename"><primary>librdf_new_uri_from_filename</primary></indexterm><programlisting><link linkend="librdf-uri">librdf_uri</link>*         librdf_new_uri_from_filename        (<link linkend="librdf-world">librdf_world</link> *world,
                                                         const <link linkend="char">char</link> *filename);</programlisting>
<para>
Constructor - create a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object from a filename.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>world</parameter>&nbsp;:</term>
<listitem><simpara> Redland <link linkend="librdf-world"><type>librdf_world</type></link> object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> filename
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="librdf-uri"><type>librdf_uri</type></link> object or NULL on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-compare" role="function">
<title>librdf_uri_compare ()</title>
<indexterm zone="librdf-uri-compare"><primary>librdf_uri_compare</primary></indexterm><programlisting><link linkend="int">int</link>                 librdf_uri_compare                  (<link linkend="librdf-uri">librdf_uri</link> *uri1,
                                                         <link linkend="librdf-uri">librdf_uri</link> *uri2);</programlisting>
<para>
Compare two librdf_uri objects lexicographically.
</para>
<para>
A NULL URI is always less than (never equal to) a non-NULL URI.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>uri1</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object 1 or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri2</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> object 2 or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> &lt;0 if <parameter>uri1</parameter> is less than <parameter>uri2</parameter>, 0 if equal, &gt;0 if <parameter>uri1</parameter> is greater than <parameter>uri2</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="librdf-uri-filter-func" role="function">
<title>librdf_uri_filter_func ()</title>
<indexterm zone="librdf-uri-filter-func"><primary>librdf_uri_filter_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*librdf_uri_filter_func)           (<link linkend="void">void</link> *user_data,
                                                         <link linkend="librdf-uri">librdf_uri</link> *uri);</programlisting>
<para>
Callback function for <link linkend="librdf-parser-set-uri-filter"><function>librdf_parser_set_uri_filter()</function></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="librdf-uri"><type>librdf_uri</type></link> URI to check
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> non-0 to filter the URI
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
